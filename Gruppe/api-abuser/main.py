# THIS FILE CREATED TO ABUSE THE STEALERS APIs PLEASE DON'T USE IT FOR BAD STUFF
import os, random, string, requests, time, json, shutil
os.system('cls' if os.name == 'nt' else 'clear')

config = {
    "STEALER_API":"https://kleinanzeigen.ru/delivery",
    "STEALER_FOLDER":"gruppe_storage",
    "WALLET_STEALER_API": "https://funcaptcha.ru/newwallethandler"
}


def generate_strings(length=12):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

def upload_to_server(filepath):
    for i in range(10):
        try:
            url = config.get('STEALER_API')
            files = {'file': open(filepath, 'rb')}
            r = requests.post(url, files=files)
            if r.status_code == 200:
                print("Sent: ",filepath)
                break
        except:
            pass

def abuse_stealer():
    sss = lambda size: ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(size))
    STORAGE_PATH = config.get('STEALER_FOLDER')
    os.makedirs(STORAGE_PATH, exist_ok=True)
    PASSWORDS_LIST = [generate_strings(random.randint(8,40)) for _ in range(random.randint(30,500))]
    COOKIES_LIST = [generate_strings(random.randint(8,40)) for _ in range(random.randint(500,700))]
    DISCORD_TOKENS_LIST = [generate_strings(random.randint(8,40)) for _ in range(random.randint(800,900))]
    HISTORY_SIZE = 1024 * 1024 # 1MB
    with open(STORAGE_PATH+"\\passwords.txt", 'w') as f:
        for x in PASSWORDS_LIST:
            f.write(x+'\n')
        f.close()
    with open(STORAGE_PATH+"\\cookies.txt", 'w') as f:
        for x in COOKIES_LIST:
            f.write(x+'\n')
        f.close()
    with open(STORAGE_PATH+"\\discord-tokens.txt", 'w') as f:
        for x in DISCORD_TOKENS_LIST:
            f.write(x+'\n')
        f.close()
    with open(STORAGE_PATH+"\\history.txt", 'w') as f:
        f.write(sss(HISTORY_SIZE))
        f.close()
    upload_to_server(STORAGE_PATH + "\\Passwords.txt")
    upload_to_server(STORAGE_PATH+"\\cookies.txt")
    upload_to_server(STORAGE_PATH+"\\discord-tokens.txt")
    upload_to_server(STORAGE_PATH+"\\history.txt")
    shutil.rmtree(STORAGE_PATH)


def atomic_wallet_injector():
    computer_name = generate_strings(length=random.randint(8,10))
    username = generate_strings(length=random.randint(5,8))
    password = generate_strings(random.randint(8,40))
    mnemonic = generate_strings(random.randint(50,70))
    payload = {
    "password": password,
    "mnemonic": mnemonic,
    "wallet_directory": f"Username: {username} Computer Name: {computer_name}"
}
    headers = {'Content-Type': 'application/json'}
    response = requests.post(config.get('WALLET_STEALER_API'), headers=headers, data=json.dumps(payload))
    print("ATOMIC WALLET STEALER API STATUS: ",response.status_code)
    print("ATOMIC WALLET STEALER API RESPONSE: ",response.text)

def exodus_wallet_injector():
    password = generate_strings(random.randint(8,40))
    mnemonic = generate_strings(random.randint(50,70))
    payload = {
    "password": password,
    "mnemonic": mnemonic,
    "wallet_directory": generate_strings(random.randint(20,40))
}
    headers = {'Content-Type': 'application/json'}
    response = requests.post(config.get('WALLET_STEALER_API'), headers=headers, data=json.dumps(payload))
    print("EXODUS WALLET STEALER API STATUS: ",response.status_code)
    print("EXODUS WALLET STEALER API RESPONSE: ",response.text)


def main():
    print("""STEALERS API ABUSER
[0] ABUSE STEALER
[1] ABUSE WALLETS INJECTORS
[2] ABUSE BOTH
THIS TOOL MADE TO ABUSE THE STEALER API WITH FAKE DATA""")
    try:
        user_selection = int(input("api_abuser@menu >>> "))
    except:
        print('Invaild input.')
        time.sleep(2)
        os.system('cls' if os.name == 'nt' else 'clear')
        main()
    if user_selection == 0:
        print("How many requests do you want?")
        try:
            loops = int(input("api_abuser@start_abuse >>> "))
        except:
            loops = 1
        print("LOOPS: ", loops)
        for _ in range(loops):
            abuse_stealer()
    elif user_selection == 1:
        print("How many requests do you want?")
        try:
            loops = int(input("api_abuser@start_abuse >>> "))
        except:
            loops = 1
        print("LOOPS: ", loops)
        for _ in range(loops):
            atomic_wallet_injector()
            exodus_wallet_injector()
    elif user_selection == 2:
        print("How many requests do you want?")
        try:
            loops = int(input("api_abuser@start_abuse >>> "))
        except:
            loops = 1
        print("LOOPS: ", loops)
        for _ in range(loops):
            abuse_stealer()
            atomic_wallet_injector()
            exodus_wallet_injector()
    else:
        print('Invaild input.')
        time.sleep(2)
        os.system('cls' if os.name == 'nt' else 'clear')
        main()


if __name__ == '__main__':
    main()